#summary A very interesting encoding with pluriform interpretations.

= Introduction =

This is work of Carette et al.

[http://okmij.org/ftp/tagless-final/course/lecture.pdf Oleg's tutorial] is very good

Consider these identities:
  * `type Empty = forall a . a`
  * `type Empty' = forall a . () => a`
  * `type Finally (c :: * -> Constraint) = forall a . c a => a; type Empty'' = Finally ()`
  * `data Empty'''` (no constructors)

To check the isomorphisms, we need to construct (round-trip) functions:

{{{
f2d :: Empty -> Empty'''
f2d a = a

d2f :: Empty''' -> Empty
d2f = \case of {}
}}}


= Questions =

Can we encode structured graphs (esp. those which have PHOAS variables)?

= Tinkering =

Can I encode a multi-level lambda calculus in final tagless form?

Let's try! What is the grammar?

Term<n> ::= V<n> | App Term<n> Term<n> | Lam Term<n> | Annot Term<n> Term<n+1>

_There is only ever only one variable in this calculus :-)_

{{{

}}}